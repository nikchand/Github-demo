rebase
reset revert

to move back file from staging area to working directory
git restore --staged story1.txt

git fetch = git brach + git merge

git fork:
In open source projects not everyone has rights to make changes in the original code that time forking helps to create a copy of main branch and then after doing all the changes sending pull request to the owner.

Cherry picking: If we don't want to take all the changes from a branch but some specific changes only then we use cherry picking.
git cherry-pick < commit hash you identified in previous step >
git cherry-pick e5b7ad2



Git Notes from scratch


Source Code Management(SCM) is of 2 types

-centralised version control system(CVCS)
-distributed version control system (DVCS)

Stages of GIT/workflow

-Workspace
-Staging are
-Loal repo
-github

Process
create a directory and go inside it
-git init (directory gets converted into local repo)
-touch test_file (put some data)
-git status (what is repo status)
-git add . (from working space to staging area)
 git config --global user.email "nikitachandrakar26@gmail.com"
 git config --global user.name "Nikita"
-git commit -m "first commit"
-git status
-git log (who commited and at what time)
-git show <commit id>  (to show code)
-git remoteadd origin <centralgit URL>  (adding local repo to central repo GITHUB)
-git push -u origin master (code will be pushed to GITHUB)
--------------**********************---------------------
 
To IGNORE some files while commiting

create one hidden file .gitignore and enter file format which you want tom ignore
for eg
vi .gitignore
*.css
*.java

-git add .gitignore
-git commit -m "latest update exclude css"
-git status

create some txt, java & css files and add them by running
-git add .
-git status
-git commit -m "my text files only"
-----------------------**********************************---------------------------------

To create BRANCH
-git branch (to see list of available branches)
-git branch <branch name>  (to create new branch)
-git checkout <branch you want to go> (to switch branch, * means current branch)
-git checkout -b <branch name> (to create a branch and immediately switch to that branch)
-git branch -d <branch name> (to delete particular branch)
-git branch -D <branch name> (to delete same forcefully)
----------------------------************************************----------------------------

MERGE
We cannot merge branches of different repo
We use pulling mechanism to merge branches
-git merge <branch name> 
-git log 
-git push origin master (to push to central repo GITHUB)
--------------------------*********************************----------------------------

Git STASHING
Stashing only applies to modified files and not new files. To keep unfinished files temoporarily away from working directory if we don't want to commit

-git stash (to stash an item)
-git stash pop (to make it come back in working directory)
-git stash list (to see stashed items)
-git stash show stash@{0} ; git stash show stash@{1}; git stash show stash@{2} (to check files which are stashed)
-git stash apply stash@{0}  (to apply stashed items)
-git add
-git commit -m "stashing items"
-git stash clear (to clear stash items)
-----------------------**********************************------------------------

Git RESET
git reset is a powerful command that is used to undo local changes to the state of a git repo
soft reset: git reset --soft HEAD~1 (to keep all the changes)
hard reset: git reset --hard HEAD~1 (to remove all the changes)

-git reset <filename> (to reset staging area)
-git reset .
-git reset --hard HEAD^ (to reset the changes from both staging and working directory at a time)
-------------------------***********************************----------------------

************************
reset ---> before pushing to remote repo GITHUB
revert ---> after commit to remote repo GITHUB (more flexible)
************************

Git REVERT
It does not delete any data instead git creates a new commit with the included files reverted to their previous state, so your version control history moves forward while the state of the file moves backward.

-sudo su
-cd directory
-git status
-cat > newfile
-git add .
-git commit -m "code"
-git log --oneline
-git revert <commit id>
------------------------------------******************************------------------ 

TO remove untracked files
-git clean -n (dry run)
-git clean -f (forcefully)
------------------***********************************--------------------------

TAGS
Tag operation allowes giving a meaningful name to a specific version in the repo 
-git tag -a <tag name> -m <message> <commit id>  (to apply tag)
-git tag (to see list of tags)
-git show <tag name> (to see a particular commit content by using tag)
-git tag -d <tag name> (to delete a tag)
--------------------*****************************------------------------

Github CLONE
open github website
login & choose existing repo
Now go to your CLI and run command
-git clone <url of github>
It creates a local repo automatically in linux machine with the same name as in github account
-----------------*************************************------------------------

Git LOG

-git log -p -2 (last 2 commmit with diff)
-git log --stat (summary of changes)
-git log --pretty=oneline
-git log -S function_name
-g
it log -n 1 (to check who made last commit)
----------------*************************************----------------------

-git remote -v (to get github url)






