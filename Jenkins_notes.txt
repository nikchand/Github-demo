JENKINS

What is Jenkins
Jenkins is an open-source automation server used primarily for  Continuous Integration (CI)  and  Continuous Delivery (CD) . It helps automate various stages of software development, from building code to deploying it in production environments.

---
Prerequisites 

Before using Jenkins, make sure the following prerequisites are in place:

 2.1 Hardware Requirements: 
- CPU: Minimum 2 cores
- RAM: Minimum 2 GB (4 GB or more recommended)
- Disk Space: 10 GB free space minimum

 2.2 Software Requirements: 
- Java 11 or later
- Operating System: Linux, Windows, or macOS
- Browser: Google Chrome, Mozilla Firefox, or Microsoft Edge (for Jenkins UI access)
---
 Installing Jenkins 

 3.1 On Ubuntu/Debian: 
1.  Update package repository: 
   ```bash
   sudo apt update
   ```

2.  Install required dependencies: 
   ```bash
   sudo apt install openjdk-11-jdk
   ```

3.  Add Jenkins repository: 
   ```bash
   wget -q -O - https://pkg.jenkins.io/jenkins.io.key | sudo apt-key add -
   sudo sh -c 'echo deb http://pkg.jenkins.io/debian/ jenkins main > /etc/apt/sources.list.d/jenkins.list'
   ```

4.  Install Jenkins: 
   ```bash
   sudo apt update
   sudo apt install jenkins
   ```

5.  Start Jenkins: 
   ```bash
   sudo systemctl start jenkins
   sudo systemctl enable jenkins
   ```

6.  Open Jenkins Web Interface:   
   - Access Jenkins via `http://<your_server_ip>:8080`
   - Retrieve the unlock key:
     ```bash
     sudo cat /var/lib/jenkins/secrets/initialAdminPassword
     ```

7.  Complete the Setup Wizard: 
   - Follow the on-screen instructions, install suggested plugins, and create the first admin user.

---

 Configuring Jenkins 

  4.1 Setting Up Tools (Java, Git, etc.): 
1. Go to  Manage Jenkins  →  Global Tool Configuration .
2. Configure the following tools:
   -  JDK : Add your JDK installation (Java 11, for example).
   -  Git : Ensure Git is installed and configured for version control.

 4.2 Set Up Jenkins Nodes (Optional): 
- To distribute builds across multiple machines, go to  Manage Jenkins  →  Manage Nodes and Clouds .
- Add new nodes (either SSH, JNLP, or cloud-based agents).

---

 Creating Jenkins Jobs 

  5.1 Creating a Freestyle Job: 
1.  Navigate to Jenkins Dashboard  →  New Item .
2.  Enter job name  → Select  Freestyle project  → Click  OK .
3. In the job configuration:
   -  Source Code Management : Choose Git, then add your repository URL and credentials.
   -  Build Triggers : Set triggers such as "Poll SCM" or "Build periodically".
   -  Build : Define build steps (e.g., run shell commands or invoke Gradle/Maven).
   -  Post-build Actions : Configure actions like "Archive the artifacts" or "Send email notifications".
   
4. Click  Save  to complete.

 5.2 Creating a Pipeline Job: 
1.  Navigate to Jenkins Dashboard  →  New Item .
2. Enter a job name → Select  Pipeline  → Click  OK .
3. In the job configuration:
   -  Pipeline Definition : Choose "Pipeline script" or "Pipeline script from SCM" if using version control.
   - Add your pipeline script (e.g., `Jenkinsfile`).
   
---

Core Features of Jenkins
1. Automation of Repetitive Tasks: Jenkins automates tasks such as building, testing, and deploying code, allowing developers to focus on development rather than manual tasks.
2. Extensibility: Jenkins supports numerous plugins that extend its functionality, such as integration with source control systems, testing frameworks, and deployment tools.
3. Pipeline Support: Jenkins enables the creation of continuous delivery pipelines, allowing teams to automatically build, test, and deploy software in stages.
4. Distributed Builds: Jenkins can distribute tasks to multiple machines or agents to speed up the build process, particularly for large projects.
5. Monitoring and Reporting: Jenkins provides detailed logs, build reports, and real-time notifications, helping teams monitor the health of their applications.

---

Key Concepts in Jenkins

1.  Job :
   A job  in Jenkins is a task or project that Jenkins will execute. This could be a build, test, deployment task, etc. Jenkins supports different types of jobs:
   -  Freestyle Project : A simple, flexible way to define tasks.
   -  Pipeline : For defining multi-step processes using  Jenkinsfile .
   -  Multibranch Pipeline : Automatically creates jobs for branches in your repository.
   
2.  Pipeline :
   A Pipeline  is a sequence of automated steps that Jenkins performs to carry out a task. These steps could include building, testing, and deploying code. Pipelines are defined in a  Jenkinsfile , a text file that can be stored in version control.

3.  Build :
   A build  refers to the process of compiling and packaging code, often triggered by changes in source code or manually by users.

4.  Executor :
   Executors are the computational resources used to run Jenkins jobs. Jenkins can have multiple executors, allowing it to run jobs on different machines or in parallel.

5.  Node :
   A node  is a machine where Jenkins runs jobs. The main node is the  master , and you can add additional nodes (slaves/agents) to distribute the workload.

---

Common Jenkins Plugins 
Jenkins relies heavily on plugins to integrate with various tools and extend its capabilities. Some common plugins include:
-  Git Plugin : For connecting Jenkins to Git repositories.
-  Maven Plugin : For building Java-based projects with Apache Maven.
-  Slack Plugin : For sending build notifications to Slack.
-  Pipeline Plugin : To create and manage Jenkins Pipelines.
-  JUnit Plugin : For reporting test results from JUnit.

---

Basic Jenkins Workflow 
1.  Set up Jenkins  on a server or cloud instance.
2.  Configure Jenkins  with necessary tools (e.g., JDK, Git, Maven) and plugins.
3.  Create a job  to define a task (e.g., build, test, or deploy).
4.  Trigger a job  manually, on a schedule, or automatically when code is pushed to the version control system.
5.  Monitor builds and pipelines : Check build status, logs, and test results.
6.  Deploy code : Once the build is successful, deploy the application to the desired environment.

---

Jenkins Pipeline Overview 

A  Pipeline  is defined using a  Jenkinsfile , which is a script that contains all the stages and steps of your build, test, and deploy process. There are two types of pipelines:

1.  Declarative Pipeline : Uses a predefined structure with a simpler syntax.
   ```groovy
   pipeline {
       agent any
       stages {
           stage('Build') {
               steps {
                   sh 'mvn clean install'
               }
           }
           stage('Test') {
               steps {
                   sh 'mvn test'
               }
           }
           stage('Deploy') {
               steps {
                   sh './deploy.sh'
               }
           }
       }
   }
   ```

2.  Scripted Pipeline : Offers more flexibility but requires more complex syntax.
   ```groovy
   node {
       stage('Build') {
           sh 'mvn clean install'
       }
       stage('Test') {
           sh 'mvn test'
       }
       stage('Deploy') {
           sh './deploy.sh'
       }
   }
   ```

---


 Backup and Restore 

 8.1 Backup Jenkins Data: 
To back up Jenkins data (configuration, plugins, and jobs):
1.  Backup Jenkins Home Directory :  
   Typically located at `/var/lib/jenkins` or `/home/jenkins`.
2. Use `rsync` or tar to create a backup:
   ```bash
   sudo tar -czvf jenkins_backup.tar.gz /var/lib/jenkins/
   ```
  8.2 Restore Jenkins: 
1. To restore, untar the backup into the Jenkins home directory:
   ```bash
   sudo tar -xzvf jenkins_backup.tar.gz -C /var/lib/jenkins/
   ```

---

Common Jenkins Use Cases 
1.  Continuous Integration (CI) : Automatically building and testing code every time a change is committed to the source code repository.
2.  Continuous Delivery (CD) : Automating the deployment process to ensure that code is always in a deployable state.
3.  Automated Testing : Running unit, integration, or functional tests automatically during the build process.
4.  Deployment Automation : Deploying code to various environments (e.g., dev, staging, production) based on different conditions or triggers.

---

Jenkins Best Practices 
1.  Use Version Control for Jenkinsfiles : Store your Jenkins pipeline configuration (`Jenkinsfile`) in the same repository as your application code for version tracking.
2.  Keep Jobs Simple : Break complex jobs into smaller, manageable tasks.
3.  Clean Workspaces Regularly : Use plugins to clean up workspaces to avoid disk space issues.
4.  Use Credentials Plugin : Store sensitive data like API keys and credentials securely in Jenkins' credential store.

---

Basic Troubleshooting in Jenkins 
-  Job fails due to "Permission Denied" : Check that the user running Jenkins has sufficient permissions on the workspace or code repository.
-  Jenkins UI is slow : Check the system’s resource usage (CPU, RAM), as Jenkins might be running on an under-provisioned machine.
-  Job hangs : Investigate the logs for stuck steps, and check network or dependency issues.
-  Failed build due to missing environment variables : Ensure all required environment variables are correctly defined in the job or pipeline configuration.

---

Jenkins Security Best Practices 
-  Enable Authentication : Use  Matrix-based security  or  Role-based access control (RBAC)  to control who can access Jenkins and what they can do.
-  Use SSL : Enable HTTPS to secure communication between the Jenkins server and users.
-  Regularly Update Jenkins : Keep Jenkins and its plugins up to date to mitigate security vulnerabilities.

---






